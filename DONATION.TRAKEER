// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract DonationTracker {
    address public owner;

    struct Donation {
        address donor;
        uint256 amount;
        string message;
        uint256 timestamp;
    }

    Donation[] public allDonations;
    mapping(address => Donation[]) public donationsByDonor;
    mapping(address => uint256) public totalDonatedBy;

    event DonationReceived(address indexed donor, uint256 amount, string message, uint256 timestamp);
    event Withdrawal(address indexed to, uint256 amount);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized");
        _;
    }

    constructor() {
        owner = msg.sender;
        emit OwnershipTransferred(address(0), msg.sender);
    }

    function donate(string memory _message) external payable {
        require(msg.value > 0, "Donation must be greater than 0");

        Donation memory newDonation = Donation({
            donor: msg.sender,
            amount: msg.value,
            message: _message,
            timestamp: block.timestamp
        });

        allDonations.push(newDonation);
        donationsByDonor[msg.sender].push(newDonation);
        totalDonatedBy[msg.sender] += msg.value;

        emit DonationReceived(msg.sender, msg.value, _message, block.timestamp);
    }

    function withdraw(address payable _to, uint256 _amount) external onlyOwner {
        require(_amount <= address(this).balance, "Insufficient balance");
        _to.transfer(_amount);
        emit Withdrawal(_to, _amount);
    }

    function getAllDonations() external view returns (Donation[] memory) {
        return allDonations;
    }

    function getDonationsByAddress(address _donor) external view returns (Donation[] memory) {
        return donationsByDonor[_donor];
    }

    function getTotalDonatedBy(address _donor) external view returns (uint256) {
        return totalDonatedBy[_donor];
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    receive() external payable {
        donate("Donation via receive()");
    }

    fallback() external payable {
        donate("Donation via fallback()");
    }
}
